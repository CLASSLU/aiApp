server {
    listen 80;
    server_name localhost;
    
    # 启用gzip压缩
    gzip on;
    gzip_min_length 1000;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;
    
    # 项目根目录
    root /usr/share/nginx/html;
    index index.html;
    
    # 不缓存HTML文件
    location ~ \.html$ {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    }
    
    # 处理前端静态资源，缓存
    location /assets/ {
        access_log off;
        expires 30d;
        try_files $uri $uri/ =404;
    }
    
    # 反向代理API请求，解决CORS问题
    location /api/ {
        # 调试日志
        error_log /var/log/nginx/api_error.log debug;
        access_log /var/log/nginx/api_access.log;

        # 关闭缓存，确保API请求每次获取最新结果
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        expires off;
        
        # 移除跨域问题
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # OPTIONS请求特殊处理
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # 修改后端地址为明确的IP和端口 - 确保在Docker网络内可以解析
        # 也可以尝试使用具体IP地址替代容器名
        proxy_pass http://backend:5000;
        
        # 添加关键请求头
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 支持WebSocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 提高超时设置，避免长请求超时
        proxy_connect_timeout 300s;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        
        # 关闭代理缓冲，提高实时性
        proxy_buffering off;
        
        # 显示详细错误信息
        proxy_intercept_errors off;
    }
    
    # 所有其他请求返回到前端应用
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # 错误处理
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
} 